name: Build

on:
  push:
  pull_request:
  merge_group:

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    env:
      CARGO_HTTP_MULTIPLEXING: false
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        include:
        - os: windows-latest
          cmake-args: -A x64
          cmake-init-env: CXXFLAGS=/WX LDFLAGS=/WX
          package-file: "*-win64.zip"
          fancy: false

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Download Python source
      run: |
        curl -O https://www.python.org/ftp/python/3.11.9/Python-3.11.9.tgz
        tar -xvzf Python-3.11.9.tgz
        cd Python-3.11.9
        ./configure --with-pydebug
        make
        sudo make install

      #    - name: Prepare Vulkan SDK
#      uses: humbletim/setup-vulkan-sdk@v1.2.0
#      with:
#        vulkan-query-version: 1.3.204.0
#        vulkan-components: Vulkan-Headers, Vulkan-Loader, SPIRV-Headers, SPIRV-Cross, SPIRV-Tools, SPIRV-Reflect, Glslang
#        vulkan-use-cache: true

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build in debug mode
      run: |
        mkdir debug
        cd debug
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Debug -Werror=dev -DDOWNLOAD_GTEST=ON -DDEV=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Debug --target everything ${{ matrix.build-args }}

    - name: Test debug
      run: |
        cd debug
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.gtest-env }} ${{ matrix.cmake-path }}cmake --build . --config Debug --target run_tests ${{ matrix.build-args }}

    - name: Run debug server
      run: |
        cd debug
        ./DDNet-Server shutdown

    - name: Build in release mode
      run: |
        mkdir release
        cd release
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -Werror=dev -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Release --target everything ${{ matrix.build-args }}

    - name: Test release
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.gtest-env }} ${{ matrix.cmake-path }}cmake --build . --config Release --target run_tests ${{ matrix.build-args }}

    - name: Run release server
      run: |
        cd release
        ./DDNet-Server shutdown

    - name: Build in release mode with debug info and all features on
      if: matrix.fancy
      run: |
        mkdir fancy
        cd fancy
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=RelWithDebInfo -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. -DANTIBOT=ON -DWEBSOCKETS=ON ..
        ${{ matrix.cmake-path }}cmake --build . --config RelWithDebInfo --target everything ${{ matrix.build-args }}

    - name: Test fancy
      if: matrix.fancy
      run: |
        cd fancy
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.gtest-env }} ${{ matrix.cmake-path }}cmake --build . --config RelWithDebInfo --target run_tests ${{ matrix.build-args }}

    - name: Run fancy server
      if: matrix.fancy
      run: |
        cd fancy
        ./DDNet-Server shutdown

    - name: Package
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release --target package_default ${{ matrix.build-args }}
        mkdir artifacts
        mv ${{ matrix.package-file }} artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ddnet-${{ matrix.os }}
        path: release/artifacts
