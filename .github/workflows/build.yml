name: Build

on:
  push:
  pull_request:
  merge_group:

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    env:
      CARGO_HTTP_MULTIPLEXING: false
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
        - os: windows-latest
          cmake-args: -A x64
          cmake-init-env: CXXFLAGS=/WX LDFLAGS=/WX
          package-file: "*-win64.zip"
          fancy: false
        - os: ubuntu-latest
          cmake-args: -G Ninja
          cmake-init-env: CXXFLAGS=-Werror
          package-file: "*-linux_x86_64.tar.xz"
          fancy: true

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        # mount: /var/lib/grub/esp: special device /dev/disk/by-id/scsi-... does not exist.
        # sudo apt-get upgrade -y
        sudo apt-get install pkg-config cmake ninja-build libfreetype6-dev libnotify-dev libsdl2-dev libsqlite3-dev libvulkan-dev glslang-tools spirv-tools libavcodec-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev libx264-dev libpng-dev valgrind gcovr libglew-dev -y

    - name: Prepare Linux (fancy)
      if: contains(matrix.os, 'ubuntu') && matrix.fancy
      run: |
        sudo apt-get install libmariadb-dev libwebsockets-dev mariadb-server -y
        sudo systemctl stop mysql
        sudo rm -rf /var/lib/mysql/
        sudo mysql_install_db --user=mysql --datadir=/var/lib/mysql/
        cd /usr; sudo mysqld_safe --datadir='/var/lib/mysql/' --no-watch
        sleep 10
        sudo mysql <<EOF
        CREATE DATABASE ddnet;
        CREATE USER 'ddnet'@'localhost' IDENTIFIED BY 'thebestpassword';
        GRANT ALL PRIVILEGES ON ddnet.* TO 'ddnet'@'localhost';
        FLUSH PRIVILEGES;
        EOF

    - uses: actions/setup-python@v5
      with:
        python-version: '3.11.9'

      #    - name: Prepare Vulkan SDK
#      uses: humbletim/setup-vulkan-sdk@v1.2.0
#      with:
#        vulkan-query-version: 1.3.204.0
#        vulkan-components: Vulkan-Headers, Vulkan-Loader, SPIRV-Headers, SPIRV-Cross, SPIRV-Tools, SPIRV-Reflect, Glslang
#        vulkan-use-cache: true

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

#    - name: Build in debug mode
#      run: |
#        mkdir debug
#        cd debug
#        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Debug -Werror=dev -DDOWNLOAD_GTEST=ON -DDEV=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. ..
#        ${{ matrix.cmake-path }}cmake --build . --config Debug --target everything ${{ matrix.build-args }}
#
#    - name: Test debug
#      run: |
#        cd debug
#        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.gtest-env }} ${{ matrix.cmake-path }}cmake --build . --config Debug --target run_tests ${{ matrix.build-args }}
#
#    - name: Run debug server
#      run: |
#        cd debug
#        ./DDNet-Server shutdown

    - name: Build headless client
      if: contains(matrix.os, 'ubuntu-latest')
      run: |
        mkdir headless
        cd headless
        ${{ matrix.cmake-path }}cmake --version
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DHEADLESS_CLIENT=ON -DCMAKE_BUILD_TYPE=Debug -Werror=dev -DDOWNLOAD_GTEST=ON -DDEV=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. -DCMAKE_CXX_FLAGS="-fexceptions" ..
        ${{ matrix.cmake-path }}cmake -E env RUSTFLAGS="-Clink-arg=--coverage" ${{ matrix.cmake-path }}cmake --build . --config Debug  ${{ matrix.build-args }}

    - name: Build in release mode
      run: |
        mkdir release
        cd release
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -Werror=dev -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. -DCMAKE_CXX_FLAGS="-fexceptions" ..
        ${{ matrix.cmake-path }}cmake --build . --config Release --target everything ${{ matrix.build-args }}

    - name: Test release
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.gtest-env }} ${{ matrix.cmake-path }}cmake --build . --config Release --target run_tests ${{ matrix.build-args }}

    - name: Run release server
      run: |
        cd release
        ./DDNet-Server shutdown

    - name: Build in release mode with debug info and all features on
      if: matrix.fancy
      run: |
        mkdir fancy
        cd fancy
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.cmake-init-env }} ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=RelWithDebInfo -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. -DANTIBOT=ON -DWEBSOCKETS=ON ..
        ${{ matrix.cmake-path }}cmake --build . --config RelWithDebInfo --target everything ${{ matrix.build-args }}

    - name: Test fancy
      if: matrix.fancy
      run: |
        cd fancy
        ${{ matrix.cmake-path }}cmake -E env ${{ matrix.gtest-env }} ${{ matrix.cmake-path }}cmake --build . --config RelWithDebInfo --target run_tests ${{ matrix.build-args }}

    - name: Run fancy server
      if: matrix.fancy
      run: |
        cd fancy
        ./DDNet-Server shutdown

    - name: Package
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release --target package_default ${{ matrix.build-args }}
        mkdir artifacts
        mv ${{ matrix.package-file }} artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dth-${{ matrix.os }}
        path: release/artifacts
